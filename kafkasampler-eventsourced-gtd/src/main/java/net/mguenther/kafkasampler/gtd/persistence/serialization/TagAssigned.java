/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.mguenther.kafkasampler.gtd.persistence.serialization;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TagAssigned extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3989484153070295729L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TagAssigned\",\"namespace\":\"net.mguenther.kafkasampler.gtd.persistence.serialization\",\"fields\":[{\"name\":\"itemId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String itemId;
  @Deprecated public java.lang.String tag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TagAssigned() {}

  /**
   * All-args constructor.
   * @param itemId The new value for itemId
   * @param tag The new value for tag
   */
  public TagAssigned(java.lang.String itemId, java.lang.String tag) {
    this.itemId = itemId;
    this.tag = tag;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return itemId;
    case 1: return tag;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: itemId = (java.lang.String)value$; break;
    case 1: tag = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public java.lang.String getItemId() {
    return itemId;
  }

  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(java.lang.String value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'tag' field.
   * @return The value of the 'tag' field.
   */
  public java.lang.String getTag() {
    return tag;
  }

  /**
   * Sets the value of the 'tag' field.
   * @param value the value to set.
   */
  public void setTag(java.lang.String value) {
    this.tag = value;
  }

  /**
   * Creates a new TagAssigned RecordBuilder.
   * @return A new TagAssigned RecordBuilder
   */
  public static net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder newBuilder() {
    return new net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder();
  }

  /**
   * Creates a new TagAssigned RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TagAssigned RecordBuilder
   */
  public static net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder newBuilder(net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder other) {
    return new net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder(other);
  }

  /**
   * Creates a new TagAssigned RecordBuilder by copying an existing TagAssigned instance.
   * @param other The existing instance to copy.
   * @return A new TagAssigned RecordBuilder
   */
  public static net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder newBuilder(net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned other) {
    return new net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder(other);
  }

  /**
   * RecordBuilder for TagAssigned instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TagAssigned>
    implements org.apache.avro.data.RecordBuilder<TagAssigned> {

    private java.lang.String itemId;
    private java.lang.String tag;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tag)) {
        this.tag = data().deepCopy(fields()[1].schema(), other.tag);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TagAssigned instance
     * @param other The existing instance to copy.
     */
    private Builder(net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tag)) {
        this.tag = data().deepCopy(fields()[1].schema(), other.tag);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public java.lang.String getItemId() {
      return itemId;
    }

    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder setItemId(java.lang.String value) {
      validate(fields()[0], value);
      this.itemId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tag' field.
      * @return The value.
      */
    public java.lang.String getTag() {
      return tag;
    }

    /**
      * Sets the value of the 'tag' field.
      * @param value The value of 'tag'.
      * @return This builder.
      */
    public net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder setTag(java.lang.String value) {
      validate(fields()[1], value);
      this.tag = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tag' field has been set.
      * @return True if the 'tag' field has been set, false otherwise.
      */
    public boolean hasTag() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tag' field.
      * @return This builder.
      */
    public net.mguenther.kafkasampler.gtd.persistence.serialization.TagAssigned.Builder clearTag() {
      tag = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TagAssigned build() {
      try {
        TagAssigned record = new TagAssigned();
        record.itemId = fieldSetFlags()[0] ? this.itemId : (java.lang.String) defaultValue(fields()[0]);
        record.tag = fieldSetFlags()[1] ? this.tag : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
